<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_166541_ibm_resil.ResilientDefaultHandler</api_name>
        <client_callable>false</client_callable>
        <description>Handle events from Resilient Action Module</description>
        <name>ResilientDefaultHandler</name>
        <script><![CDATA[var ResilientDefaultHandler = Class.create();
ResilientDefaultHandler.prototype = {
	initialize: function() {
	},
	
	type: 'ResilientDefaultHandler',
	
	create: function(message) {
		this.resilientClient = new ResilientAPI();
		var gr;
		var incID = message.incident.id;
		var taskID;
		if (message.task){
			// Create Ticket from Task
			taskID = message.task.id;
			// re-request for non-html versions of fields
			message.task = this.resilientClient.getTask(taskID);
			gr = this.createFromTask(message.task, message.properties);
		}
		else if (message.incident){
			// Create Ticket from Incident
			// Re-Request so we get non-html versions of fields
			message.incident = this.resilientClient.getIncident(incID);
			gr = this.createFromIncident(message.incident, message.properties);
		}
		else{
			throw "Invalid Request from Resilient";
		}
		
		var sys_id = gr.insert();
		
		var errorMessage = gr.getLastErrorMessage();
		if (errorMessage){
			throw errorMessage;
		}
		
		this.updateResilientAfterCreate(sys_id, gr, message);
		
		/*
		var grJSON = {
		};
		for (var prop in gr) {
			if (typeof gr[prop] !== 'undefined' && gr[prop] !== null) {
				grJSON[prop] = gr.getValue(prop);
			}
		}
		
		// Return Full Ticket:
		return grJSON;
 		*/
		
		return{
			"success": true
		};
	},
	
	createFromTask: function(task, properties){
		var gr = new GlideRecord('incident');
		var taskID = task.id;
		gr.setValue("short_description", task.name);
		gr.setValue("description", task.instr_text);
		if (gr.isValidField("u_resilient_id")){
			var id = task.inc_id + "." + task.id;
			gr.setValue("u_resilient_id", id);
		}
		// TODO: Set Due Date
		
		if (properties){
			if (properties.worknotes){
				gr.work_notes = properties.worknotes;
			}
			if (properties.comments){
				gr.comments = properties.comments;
			}
		}
		return gr;
	},
	
	createFromIncident: function(incident, properties){
		var gr = new GlideRecord('incident');
		incID = incident.id;
		gr.setValue("short_description", incident.name);
		gr.setValue("description", incident.description);
		if (gr.isValidField("u_resilient_id")){
			gr.setValue("u_resilient_id", incident.id.toString());
		}
		if (properties){
			if (properties.worknotes){
				gr.work_notes = properties.worknotes;
			}
			if (properties.comments){
				gr.comments = properties.comments;
			}
		}
		return gr;
	},
	
	updateResilientAfterCreate: function(sysID, gr, message){
		var taskID = null;
		var incID = message.incident.id;
		var updates;
		if (message.task){
			taskID = message.task.id;
			//Prefix task name with ticket number
			updates = {
				"name": "[" + gr.getValue("number") + "] " + message.task.name
			};
			this.resilientClient.updateTask(taskID, updates);
		}
		else {
			//Prefix incident name with ticket number
			updates = {
				"name": "[" + gr.getValue("number") + "] " + message.incident.name
			};
			this.resilientClient.updateIncident(message.incident, updates);
		}
		
		var tableRow = {
			"snow_resilient_task_id": taskID,
			"snow_ticket_number": gr.getValue("number"),
			"snow_short_description": gr.getValue("short_description"),
			"snow_status": gr.getDisplayValue("state"),
			"snow_ticket_sys_id": sysID,
			"snow_table_name": gr.getTableName(),
		};
		var newRow = this.resilientClient.addDataTableRow(incID, "servicenow_tickets", tableRow);
	},
	
	getTicketToUpdate: function(incID, taskID){
		// Match a Resilient Incident/Task up to an existing ServiceNow Ticket
		var conditions = {
			"snow_resilient_task_id": taskID
		};
		var rows = this.resilientClient.getDataTableRows(incID, "servicenow_tickets", conditions);
		if (rows.length == 0 && taskID){
			// Try again without task ID
			conditions = {
				"snow_resilient_task_id": null
			};
			rows = this.resilientClient.getDataTableRows(incID, "servicenow_tickets", conditions);
		}
		if (rows.length == 0){
			throw("Couldn't find ticket for Resilient Incident.Task " + incID + "." + taskID);
		}
		else if (rows.length > 1){
			throw("Resilient Incident.Task linked to multiple tickets" + incID + "." + taskID);
		}
		var sysID = rows[0].cells.snow_ticket_sys_id.value;
		var tableName = rows[0].cells.snow_table_name.value;
		var gr = new GlideRecord(tableName);
		gr.get(sysID);
		return gr;
	},
	
	update: function(message) {
		this.resilientClient = new ResilientAPI();
		var incID = message.incident.id;
		// Re-Request so we get non-html versions of fields
		message.incident = resilientClient.getIncident(incID);
		var taskID = null;
		if (message.task){
			taskID = message.task.id;
			message.task = resilientClient.getTask(taskID);
		}
		// Check which ticket this update is for
		var gr = this.getTicketToUpdate(incID, taskID);
		
		// Do Updates
		if(message.incident.plan_status == "C"){
			gr.state = "Resolved";
			gr.work_notes = "Resilient Incident " + incID + " has closed.\n" + "Resolution ID: " + message.incident.resolution_id + "\nResolution Summary: " + message.incident.resolution_summary;
			gr.update();
		}
		if(message.task && message.task.status == "C"){
			gr.state = "Resolved";
			gr.work_notes = "Resilient Incident " + incID + " Task " + taskID +" has closed. ";
			gr.update();
		}
		
		var errorMessage = gr.getLastErrorMessage();
		if (errorMessage){
			throw errorMessage;
		}
		
		var rowUpdate = {
			"snow_status": gr.state.getDisplayValue()
		};
		resilientClient.updateDataTableRow(incID, "servicenow_tickets", rows[0], rowUpdate);
		
		return{
			"success": true
		};
	},
	
	worknote: function(message) {
		var resilientClient = new ResilientAPI();
		var incID = message.note.inc_id;
		var taskID = message.note.task_id ? message.note.task_id : null;
		
		// Check which ticket this update is for
		var gr = this.getTicketToUpdate(incID, taskID);
		
		this.postWorkNote(gr, message.note);
		
		var errorMessage = gr.getLastErrorMessage();
		if (errorMessage){
			throw errorMessage;
		}
		
		return{
			"success": true
		};
	},
	
	comment: function(message) {
		var resilientClient = new ResilientAPI();
		var incID = message.note.inc_id;
		var taskID = message.note.task_id ? message.note.task_id : null;
		
		// Check which ticket this update is for
		var gr = this.getTicketToUpdate(incID, taskID);
		
		this.postComment(gr, message.note);
		
		var errorMessage = gr.getLastErrorMessage();
		if (errorMessage){
			throw errorMessage;
		}
		
		return {
			"success": true
		};
	},
	
	postComment: function(gr, note){
		var taskID = note.task_id ? note.task_id : null;
		// Re-Request so we get non-html versions of fields
		if (taskID){
			note = resilientClient.getTaskNote(taskID, note.id);
		}
		else{
			note = resilientClient.getIncidentNote(note.inc_id, note.id);
		}
		
		// Post Comment
		gr.comments = note.text;
		gr.update();
	},
	
	postWorkNote: function(gr, note){
		var taskID = note.task_id ? note.task_id : null;
		// Re-Request so we get non-html versions of fields
		if (taskID){
			note = resilientClient.getTaskNote(taskID, note.id);
		}
		else{
			note = resilientClient.getIncidentNote(note.inc_id, note.id);
		}
		
		// Post Work Note
		gr.work_notes = note.text;
		gr.update();
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-02 02:11:52</sys_created_on>
        <sys_id>1a674ad90fba0300bc87ba8ce1050eb2</sys_id>
        <sys_mod_count>45</sys_mod_count>
        <sys_name>ResilientDefaultHandler</sys_name>
        <sys_package display_value="IBM Resilient" source="x_166541_ibm_resil">23e3da820f120300bc87ba8ce1050e97</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Resilient">23e3da820f120300bc87ba8ce1050e97</sys_scope>
        <sys_update_name>sys_script_include_1a674ad90fba0300bc87ba8ce1050eb2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-30 19:32:33</sys_updated_on>
    </sys_script_include>
</record_update>
